:toc: macro
:toc-title: Contents
:toclevels: 3
:experimental:

= Get started with Java and create a simple Web Project

image:https://img.shields.io/github/license/rcmoutinho/basic-java-web.svg[GitHub License]

The purpose of this initiative is to create a base code to get started any new project. But also to have a guide remembering all the key concepts and commands used during the development.

In the end, it is an open-sourced documentation to help developers (and my future self) with easy access to update and clone.

Enjoy the journey!

toc::[]

== Install

* https://git-scm.com/[Git]
* https://code.visualstudio.com[Visual Studio Code]
* https://www.docker.com[Docker]

=== Optional

The following installations can be avoided only using Docker. But feel free to install locally too.

* https://openjdk.java.net/install/[OpenJDK]
* https://maven.apache.org/[Maven]
* http://tomcat.apache.org/[Tomcat]

== Run

Before trying to run the container, you will need to build an image. Execute the following command on the terminal to create the image. The first execution may take some time, but after it, it will execute much faster using Docker cached layers.

[source,bash]
----
docker build -t rcmoutinho/java-web:0.0.1 .
----
* `-t <tag_name[:tag_version]>` -> Gives a name to the image. You can change it to whatever you want.
* `.` -> The build context, that is the current folder.

Now is time to execute a container based on the image we've just created.

[source,bash]
----
docker container run -d --rm --name java-web -p 80:8080 rcmoutinho/java-web:0.0.1
----
* `-d` -> Run container in background and print container ID. Removing this flag will maintain the terminal open, showing Tomcat's output. Press `CTRL + C` to exit.
* `--rm` -> Automatically remove the container when it exits.
* `--name <name>` -> Assign a name to the container.
* `-p <hostPort:containerPort>` -> Publish a container's port(s) to the host.

You can check http://localhost/java-web[localhost/java-web] to see your app up and running.

=== Useful Docker Commands

.Check the logs from a container
----
docker logs <container_name> -f
----
* `-f` -> Will lock the terminal following the output. Press `CTRL + C` to exit.

.Stop a running container
----
docker container stop <container_name>
----

.List all the containers (including stopped ones)
----
docker container ls -a
----
* `-a`, `--all` -> Show all containers (default shows just running).

.Check lots of cool info related to disk storage
----
docker system df -v
----
* `-v`, `--verbose` -> Show detailed information on space usage.

You can always get some fast help directly from the terminal.

----
docker --help
docker <MANAGEMENT_COMMAND> --help
docker <MANAGEMENT_COMMAND> COMMAND --help
----

== Going Deep

=== Docker multi-stage build

Multi-stage is a handy technique to optimize your Dockerfile, an also improve the maintenance and readability. To know more, check the https://docs.docker.com/develop/develop-images/multistage-build/[full documentation].

The following part of the code shows the first stage of the build, using a maven image to handle from compilation to package.

.link:Dockerfile[Dockerfile]
[source,dockerfile]
----
FROM maven:3.6-jdk-8-slim AS build

WORKDIR /usr/src/app

COPY . .
RUN mvn -B -e -C -T 1C verify
----

This second block will go directly to the format that a deploy expects, which is an application server. Note that there is no need to have maven installed to run the web application. So instead of having two different `Dockerfile`, now it's possible to copy only the desired files from other stages.

.link:Dockerfile[Dockerfile]
[source,dockerfile]
----
FROM tomcat:9.0-jre8-alpine AS deploy

WORKDIR $CATALINA_HOME/webapps/
COPY --from=build /usr/src/app/target/*.war ./

CMD ["catalina.sh", "run"]
----

The build command remains the same. But you can try to run only a specific stage to do some tests if it's needed.

[source,bash]
----
docker build --target build -t rcmoutinho/java-web:0.0.1 .
----

=== Maven commands and parameters

There are some essential concepts about Maven's build lifecycle that you can check in detail in https://cyborgdeveloper.tech/2017/10/16/automation-series-build-lifecycle/[this article]. Let's focus on explaining the other information from the build.

All the parameters used by Maven commands may seem complex, but they become ok after understanding what each letter does.

* `-B`,`--batch-mode` -> Run in non-interactive (batch) mode (disables output color)
* `-e`,`--errors` -> Produce execution error messages
* `-C`,`--strict-checksums` -> Fail the build if checksums don't match
* `-T`,`--threads <arg>` -> Thread count, for instance 2.0C where C is core multiplied
* `-o`,`--offline` -> Work offline

These parameters description can be checked running `mvn --help` if you have installed locally or using the same project's docker image:

----
docker run --rm maven:3.6-jdk-8-slim mvn --help
----

[NOTE]
--
The first part could be configured using a plugin called `go-offline` that is very useful to get everything your Maven project needs based on the `pom.xml` file. Check all https://maven.apache.org/plugins/maven-dependency-plugin/go-offline-mojo.html[plugin's information here].

[source,dockerfile]
----
FROM maven:3.6-jdk-8-slim AS build

WORKDIR /usr/src/app

COPY pom.xml .
RUN mvn -B -e -C -T 1C org.apache.maven.plugins:maven-dependency-plugin:3.1.1:go-offline

COPY . .
RUN mvn -B -e -o -T 1C verify
----

If you want to go further on this analysis on what fits best in your project, take a look at https://github.com/carlossg/docker-maven/issues/133#issue-520442765[this issue]. It shows the details in-depth between both approaches.

Regardless of the specific details, the main difference is that the offline mode will make sure that everything that is needed for any maven goal is supported (downloaded), instead of just downloading only the needs of a specific goal (like until the `verify` phase).
--
