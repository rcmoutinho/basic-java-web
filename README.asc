:toc: macro
:toc-title: Contents
:toclevels: 3
:experimental:

= Get started with Java and create a simple Web Project

image:https://img.shields.io/github/license/rcmoutinho/basic-java-web.svg[GitHub License]

The purpose of this initiative is to create a base code to get started any new project. But also to have a guide remembering all the key concepts and commands used during the development.

In the end, it is an open-sourced documentation to help developers (and my future self) with easy access to update and clone.

Enjoy the journey!

toc::[]

== Install

* https://git-scm.com/[Git]
* https://code.visualstudio.com[Visual Studio Code]
* https://www.docker.com[Docker]

=== Optional

The following installations can be avoided only using Docker. But feel free to install locally too.

* https://openjdk.java.net/install/[OpenJDK]
* https://maven.apache.org/[Maven]
* http://tomcat.apache.org/[Tomcat]

== Run

Before trying to run the container, you will need to build an image. Execute the following command on the terminal to create the image. The first execution may take some time, but after it, it will execute much faster using Docker cached layers.

[source,bash]
----
docker build -t rcmoutinho/java-web:0.0.1 .
----
* `-t <tag_name[:tag_version]>` -> Gives a name to the image. You can change it to whatever you want.
* `.` -> The build context, that is the current folder.

Now is time to execute a container based on the image we've just created.

[source,bash]
----
docker container run -d --rm --name java-web -p 80:8080 rcmoutinho/java-web:0.0.1
----
* `-d` -> Run container in background and print container ID. Removing this flag will maintain the terminal open, showing Tomcat's output. Press `CTRL + C` to exit.
* `--rm` -> Automatically remove the container when it exits.
* `--name <name>` -> Assign a name to the container.
* `-p <hostPort:containerPort>` -> Publish a container's port(s) to the host.

You can check http://localhost/java-web[localhost/java-web] to see your app up and running.

=== Useful Docker Commands

.Check the logs from a container
----
docker logs <container_name> -f
----
* `-f` -> Will lock the terminal following the output. Press `CTRL + C` to exit.

.Stop a running container
----
docker container stop <container_name>
----

.List all the containers (including stopped ones)
----
docker container ls -a
----
* `-a`, `--all` -> Show all containers (default shows just running).

.Check lots of cool info related to disk storage
----
docker system df -v
----
* `-v`, `--verbose` -> Show detailed information on space usage.

You can always get some fast help directly from the terminal.

----
docker --help
docker <MANAGEMENT_COMMAND> --help
docker <MANAGEMENT_COMMAND> COMMAND --help
----
